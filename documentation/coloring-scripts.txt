Examples are given at the end of the document.

-------------------------------------------------------------------------------

Coloring of the landscape is done in two steps.
For a given complex number,
a value function calculates information this point.
This information is then passed to a coloring function, which translates the
information to a color.

The name of scripts defining a value function must end with value.frag,
and the name of scripts defining a color function must end with color.frag.

-------------------------------------------------------------------------------

The coloring scripts are written in GLSL. 

The two functions must have the following signatures:

PointInfo
value(const in complex c)

vec4
color(const in PointInfo p)


The PointInfo struct, is to transfer information about each point.
It contains two members:

float value
bool inside

value picks a value for each point
(e.g. how many iterations it took to bail out for the mandelbrot fractal),
and inside signals whether the point is located inside or outside the fractal
set.


To allow for different precisions,
two macro types are defined to be used in the calculation of the value:

real
complex

These two types must be used in the value calculation if high precision
mode is to work.


A complex number is made up of two real numbers.
It is possible to create a complex number with

complex(real r, real i)

It is also simple to create values with value 0:

complex(0.0)
real(0.0)


To help in converting between real and float, use the following functions:

real toReal(float)
float toFloat(real)

toFloat will cause loss of precision,
so use it only where the extra precision is not necessary.


Two macros are defined to get the real and imaginary
part of a complex value:

re(z)
im(z)

Both re and im returns a real. These can also be assigned to, so e.g.

re(z) = im(z);

is valid.


Some basic arithmetic functions are defined for the types:

real add(real, real)
complex add(complex, complex)

real mult(real, real)
complex mult(complex, complex)

real square(real)
complex square(complex)

Additionally, multiplication and division with a float is allowed:

z = c / 10.0;
re(z) = 0.5 * im(c);

To subtract, negate the second argument to add:

z = add(z, -c);

-------------------------------------------------------------------------------

Two uniform variables can be used in the functions:

int iterations
float time

iterations contains the amount of iterations the function should use.
time is the elapsed time given in seconds, and can be used to animate
the coloring.

-------------------------------------------------------------------------------

Tip:
The utility ggr2glsl (https://github.com/ErikPrantare/ggr2glsl)
can be used to convert GIMP gradients to GLSL functions.

-------------------------------------------------------------------------------

Example functions

mandelbrot-value.frag:
#line 1 0

PointInfo
value(const in complex c)
{
    PointInfo p;

    complex z = complex(0.0);
    for(int i = 0; i < iterations; ++i) {
        z = add(square(z), c);

        float distSqr = toFloat(add(square(re(z)), square(im(z))));
        if(distSqr > 4.0) {
            p.inside = false;
            p.value = float(i);
            return p;
        }
    }

    p.inside = true;
    return p;
}


rainbow-color.frag:
#line 1 1

vec4
color(const in PointInfo p)
{
    // vec4 represents rgba
    // each component should be within [0.0, 1.0]
    if(p.inside) return vec4(0.0, 0.0, 0.0, 1.0);

    return vec4(
            0.5*sin(0.2*p.value)+0.5,
            0.5*cos(0.2*p.value)+0.5,
            0.5*-sin(0.2*p.value)+0.5,
            1.0);
}

The preprocessor directive #line makes sure error messages output correct line
numbers.

-------------------------------------------------------------------------------

An example value function is defined in
landscape-scripts/mandelbrot-orbit.value.
It uses the time variable to animate an orbit trap algorithm.
